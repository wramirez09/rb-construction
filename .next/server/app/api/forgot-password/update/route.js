"use strict";(()=>{var e={};e.id=635,e.ids=[635],e.modules={67096:e=>{e.exports=require("bcrypt")},30517:e=>{e.exports=require("next/dist/compiled/next-server/app-route.runtime.prod.js")},72241:(e,t,r)=>{r.r(t),r.d(t,{headerHooks:()=>g,originalPathname:()=>x,patchFetch:()=>v,requestAsyncStorage:()=>w,routeModule:()=>c,serverHooks:()=>m,staticGenerationAsyncStorage:()=>h,staticGenerationBailout:()=>f});var a={};r.r(a),r.d(a,{POST:()=>l});var s=r(95419),o=r(69108),n=r(99678),i=r(67096),u=r.n(i),p=r(32021),d=r(98984);async function l(e){let{email:t,password:r}=await e.json();if(!t||!r)return new d.NextResponse("Missing Fields",{status:400});let a=t.toLowerCase();if(!await p._.user.findUnique({where:{email:a}}))throw Error("Email does not exists");let s=await u().hash(r,10);try{return await p._.user.update({where:{email:a},data:{password:s,passwordResetToken:null,passwordResetTokenExp:null}}),d.NextResponse.json("Password Updated",{status:200})}catch(e){return new d.NextResponse("Internal Error",{status:500})}}let c=new s.AppRouteRouteModule({definition:{kind:o.x.APP_ROUTE,page:"/api/forgot-password/update/route",pathname:"/api/forgot-password/update",filename:"route",bundlePath:"app/api/forgot-password/update/route"},resolvedPagePath:"/Users/dev/Documents/GitHub/rb-construction/src/app/api/forgot-password/update/route.ts",nextConfigOutput:"",userland:a}),{requestAsyncStorage:w,staticGenerationAsyncStorage:h,serverHooks:m,headerHooks:g,staticGenerationBailout:f}=c,x="/api/forgot-password/update/route";function v(){return(0,n.patchFetch)({serverHooks:m,staticGenerationAsyncStorage:h})}},32021:(e,t,r)=>{r.d(t,{_:()=>s});let a=require("@prisma/client"),s=global.prisma||new a.PrismaClient({log:["query"]})}};var t=require("../../../../webpack-runtime.js");t.C(e);var r=e=>t(t.s=e),a=t.X(0,[638,791],()=>r(72241));module.exports=a})();